/**
 * @param {number[][]} graph
 * @param {number[]} initial
 * @return {number}
 */
var minMalwareSpread = function(graph, initial) {
    const n = graph.length
    
    const map = new Map()
    for(let i=0; i<n; i++) {
        for(let j=0; j<n; j++) {
            if(graph[i][j]==1 && i!=j) {
                if(!map.has(i)) map.set(i, [])
                map.get(i).push(j)
            }
        }
    }

    function dfs(node, visited) {
        if(visited.has(node)) return 0
        visited.add(node)
        let infectedNodes = 1
        for(const neighbor of (map.get(node) || [])) {
            if(!visited.has(neighbor)) {
                infectedNodes += dfs(neighbor, visited)
            }
        }
        return infectedNodes
    }
    
    let res = Infinity
    let minInfectedNodes = Infinity
    for(const removedNode of initial) {
        let visited = new Set()
        let infectedNodes = 0
        for(const node of initial) {
            if(node!==removedNode) {
                infectedNodes += dfs(node, visited)
            }
        }

        if(infectedNodes < minInfectedNodes || (infectedNodes == minInfectedNodes && removedNode<res)) {
            minInfectedNodes = infectedNodes
            res = removedNode
        }
    }

    return res
};